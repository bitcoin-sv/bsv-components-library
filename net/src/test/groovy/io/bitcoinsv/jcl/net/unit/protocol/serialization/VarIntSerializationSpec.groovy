/*
 * Distributed under the Open BSV software license, see the accompanying file LICENSE
 * Copyright (c) 2020 Bitcoin Association
 */
package io.bitcoinsv.jcl.net.unit.protocol.serialization


import io.bitcoinsv.jcl.tools.bytes.ByteArrayReader
import io.bitcoinsv.jcl.tools.bytes.ByteArrayWriter
import io.bitcoinj.core.Utils
import io.bitcoinj.params.MainNetParams
import io.bitcoinj.params.Net
import io.bitcoinsv.jcl.net.protocol.config.ProtocolConfig
import io.bitcoinsv.jcl.net.protocol.config.ProtocolConfigBuilder
import io.bitcoinsv.jcl.net.protocol.messages.VarIntMsg
import io.bitcoinsv.jcl.net.protocol.serialization.VarIntMsgSerializer
import io.bitcoinsv.jcl.net.protocol.serialization.common.DeserializerContext
import io.bitcoinsv.jcl.net.protocol.serialization.common.SerializerContext
import io.bitcoinsv.jcl.net.unit.protocol.tools.ByteArrayArtificalStreamProducer
import spock.lang.Specification

/**
 * Testing class for the VarIntMSg Message Serialization.
 * The test is taken the assumption that we have already a correct serialization version of this Message, obtained
 * from another source that we trust (in this case the Java BitcoinJ library). So we serialize/deserialize some
 * messages with out code and compare the results with that reference.
 */
class VarIntSerializationSpec extends Specification {

    // This is a VarInt  Serialized in HEX format, generated by a third party (bitcoinJ)
    // The following Serialized value for an Address has been produced using:
    // - value: 543

    private static final String REF_VARINT_MSG = "fd1f02"
    private static final int VAR_VALUE = 543

    def "Testing VarInt Deserializing"(int byteInterval, int delayMs) {
        given:
        ProtocolConfig config = ProtocolConfigBuilder.get(new MainNetParams(Net.MAINNET))
        DeserializerContext context = DeserializerContext.builder()
                    .protocolBasicConfig(config.getBasicConfig())
                    .build()
        VarIntMsgSerializer serializer = VarIntMsgSerializer.getInstance()
        VarIntMsg message = null
            ByteArrayReader byteReader = ByteArrayArtificalStreamProducer.stream(Utils.HEX.decode(REF_VARINT_MSG), byteInterval, delayMs)
        when:
            message = serializer.deserialize(context, byteReader)
        then:
            message.getValue() == VAR_VALUE
        where:
            byteInterval | delayMs
                20       |   2
    }

    def "Testing VarInt Serializing"() {
        given:
            ProtocolConfig config = ProtocolConfigBuilder.get(new MainNetParams(Net.MAINNET))
        SerializerContext context = SerializerContext.builder()
                    .protocolBasicConfig(config.getBasicConfig())
                    .build()
            VarIntMsg message = VarIntMsg.builder().value(VAR_VALUE).build()
            VarIntMsgSerializer serializer = VarIntMsgSerializer.getInstance()
            String messageBytesStr = null
        when:
            ByteArrayWriter byteWriter = new ByteArrayWriter()
            serializer.serialize(context, message, byteWriter)
            byte[] messageBytes = byteWriter.reader().getFullContent()
            messageBytesStr = Utils.HEX.encode(messageBytes)
        then:
            messageBytesStr.equals(REF_VARINT_MSG)
    }
}
