package io.bitcoinsv.bsvcl.net.protocol.serialization

import io.bitcoinsv.bsvcl.net.protocol.config.ProtocolConfig
import io.bitcoinsv.bsvcl.net.protocol.config.ProtocolConfigBuilder
import io.bitcoinsv.bsvcl.net.protocol.messages.BlockTxnMsg
import io.bitcoinsv.bsvcl.net.protocol.serialization.common.DeserializerContext
import io.bitcoinsv.bsvcl.net.protocol.serialization.common.SerializerContext
import io.bitcoinsv.bsvcl.net.protocol.tools.ByteArrayArtificalStreamProducer
import io.bitcoinsv.bsvcl.common.bytes.ByteArrayReader
import io.bitcoinsv.bsvcl.common.bytes.ByteArrayWriter
import io.bitcoinsv.bitcoinjsv.core.Utils
import io.bitcoinsv.bitcoinjsv.params.MainNetParams
import io.bitcoinsv.bitcoinjsv.params.Net
import spock.lang.Specification

class BlockTxnMsgSpec extends Specification {
    private static final String BLOCKTXN_BYTES = ""

    def "Testing BlockTxn Deserialize"(int byteInterval, int delayMs) {
        given:
            ProtocolConfig config = ProtocolConfigBuilder.get(new MainNetParams(Net.MAINNET))
            DeserializerContext context = DeserializerContext.builder()
                .protocolBasicConfig(config.getBasicConfig())
                .build()

            byte[] bytes = Utils.HEX.decode(BLOCKTXN_BYTES)

            BlockTxnMsgSerializer serializer = BlockTxnMsgSerializer.getInstance()
            BlockTxnMsg message

        when:
            ByteArrayReader byteReader = ByteArrayArtificalStreamProducer.stream(bytes, byteInterval, delayMs)
            message = serializer.deserialize(context, byteReader)

        then:
            message.messageType == BlockTxnMsg.MESSAGE_TYPE
            message.transactions.size() == 15

        where:
            byteInterval | delayMs
            10           | 5
    }

    def "Testing BlockTxn Serializing"() {
        given:
            ProtocolConfig config = ProtocolConfigBuilder.get(new MainNetParams(Net.MAINNET))

            DeserializerContext deserializationContext = DeserializerContext.builder()
                .protocolBasicConfig(config.getBasicConfig())
                .build()

            SerializerContext serializationContext = SerializerContext.builder()
                .protocolBasicConfig(config.getBasicConfig())
                .build()

            byte[] bytes = Utils.HEX.decode(BLOCKTXN_BYTES)

            BlockTxnMsgSerializer serializer = BlockTxnMsgSerializer.getInstance()
            ByteArrayReader byteReader = ByteArrayArtificalStreamProducer.stream(bytes, byteInterval, delayMs)
            BlockTxnMsg message = serializer.deserialize(deserializationContext, byteReader)

            String messageSerializedBytes
        when:
            ByteArrayWriter byteWriter = new ByteArrayWriter()
            serializer.serialize(serializationContext, message, byteWriter)
            messageSerializedBytes = Utils.HEX.encode(byteWriter.reader().getFullContent())
            byteWriter.reader()

        then:
            messageSerializedBytes == BLOCKTXN_BYTES

        where:
            byteInterval | delayMs
            10           | 5
    }
}
