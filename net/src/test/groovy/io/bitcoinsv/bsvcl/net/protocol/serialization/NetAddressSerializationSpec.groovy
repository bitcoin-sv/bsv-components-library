package io.bitcoinsv.bsvcl.net.protocol.serialization


import io.bitcoinsv.bsvcl.common.bytes.ByteArrayReader
import io.bitcoinsv.bsvcl.common.bytes.ByteArrayWriter
import io.bitcoinsv.bitcoinjsv.core.Utils
import io.bitcoinsv.bitcoinjsv.params.MainNetParams
import io.bitcoinsv.bitcoinjsv.params.Net
import io.bitcoinsv.bsvcl.net.protocol.tools.ByteArrayArtificalStreamProducer
import spock.lang.Specification

/**
 * Testing class for the NetAddressMsg Message Serialization.
 * The test is taken the assumption that we have already a correct serialization version of this Message, obtained
 * from another source that we trust (in this case the Java BitcoinJ library). So we serialize/deserialize some
 * messages with out code and compare the results with that reference.
 */
class NetAddressSerializationSpec extends Specification {

    // This is a NetAddressMsg Message Serialized for the Main Network in HEX format,
    // generated by a third party (bitcoinJ).
    // The following Serialized value for an Address has been produced using:
    // - Main Network
    // - timestamp: 0
    // - Localhost and standard getPort (8333)

    private static final String REF_ADDRESS_MSG = "0b6d2f5d000000000000000000000000000000000000ffff7f000001208d"
    private static final long REF_TIMESTAMP = 1563389195
    private static final int REF_PORT = 8333
    private static final io.bitcoinsv.bsvcl.net.network.PeerAddress REF_ADDRESS = new io.bitcoinsv.bsvcl.net.network.PeerAddress(InetAddress.getByName("localhost"), REF_PORT)

    def "Testing NetAddress Deserializing"(int byteInterval, int delayMs) {
        given:
            io.bitcoinsv.bsvcl.net.protocol.config.ProtocolConfig config = io.bitcoinsv.bsvcl.net.protocol.config.ProtocolConfigBuilder.get(new MainNetParams(Net.MAINNET))
            io.bitcoinsv.bsvcl.net.protocol.serialization.common.DeserializerContext context = io.bitcoinsv.bsvcl.net.protocol.serialization.common.DeserializerContext.builder()
                    .protocolBasicConfig(config.getBasicConfig())
                    .build()
            io.bitcoinsv.bsvcl.net.protocol.serialization.NetAddressMsgSerializer serializer = io.bitcoinsv.bsvcl.net.protocol.serialization.NetAddressMsgSerializer.getInstance()
            io.bitcoinsv.bsvcl.net.protocol.messages.NetAddressMsg address = null
            ByteArrayReader byteArrayReader = ByteArrayArtificalStreamProducer.stream(Utils.HEX.decode(REF_ADDRESS_MSG), byteInterval, delayMs);
        when:
            address = serializer.deserialize(context, byteArrayReader)
        then:
            address.getLengthInBytes() == io.bitcoinsv.bsvcl.net.protocol.messages.NetAddressMsg.MESSAGE_LENGTH
            address.getAddress().getIp().getCanonicalHostName().equals(REF_ADDRESS.getIp().getCanonicalHostName())
            address.getAddress().getPort() == config.getBasicConfig().getPort()
        where:
            byteInterval | delayMs
                10       |    15
    }

    def "Testing NetAddress Serializing"() {
        given:
            io.bitcoinsv.bsvcl.net.protocol.config.ProtocolConfig config = io.bitcoinsv.bsvcl.net.protocol.config.ProtocolConfigBuilder.get(new MainNetParams(Net.MAINNET))
            io.bitcoinsv.bsvcl.net.protocol.serialization.common.SerializerContext context = io.bitcoinsv.bsvcl.net.protocol.serialization.common.SerializerContext.builder()
                    .protocolBasicConfig(config.getBasicConfig())
                    .build()
            io.bitcoinsv.bsvcl.net.protocol.serialization.NetAddressMsgSerializer serializer = io.bitcoinsv.bsvcl.net.protocol.serialization.NetAddressMsgSerializer.getInstance()

            io.bitcoinsv.bsvcl.net.protocol.messages.NetAddressMsg address = io.bitcoinsv.bsvcl.net.protocol.messages.NetAddressMsg.builder()
                    .timestamp(REF_TIMESTAMP)
                    .address(new io.bitcoinsv.bsvcl.net.network.PeerAddress(InetAddress.getByName("localhost"), config.getBasicConfig().getPort()))
                    .build()
            String msgSerializedHex = null
        when:
            ByteArrayWriter byteWriter = new ByteArrayWriter()
            serializer.serialize(context, address, byteWriter)
            byte[] addressBytes = byteWriter.reader().getFullContent()
            msgSerializedHex = Utils.HEX.encode(addressBytes)
        then:
            msgSerializedHex.equals(REF_ADDRESS_MSG)
    }
}
